// Mixins.less
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;

  &:last-child {
    *margin-left: 0;
  }
}

// Sizing shortcuts
// -------------------------
@mixin size($height: 5px, $width: 5px) {
  width: $width;
  height: $height;
}
@mixin square($size: 5px) {
  @include size($size, $size);
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  :-moz-placeholder {
    color: $color;
  }
  ::-webkit-input-placeholder {
    color: $color;
  }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



// FONTS
// --------------------------------------------------

@mixin font-family-custom-serif($font) { font-family: $font, $serif; }
@mixin font-family-custom-sans-serif($font) { font-family: $font, $sansserif; }
@mixin font-family-serif() { font-family: $serif }
@mixin font-family-sans-serif() { font-family: $sansserif }
@mixin font-family-monospace() { font-family: Menlo, Monaco, "Courier New", monospace }

@mixin font-custom($font, $size: $baseFontSize, $weight: normal, $lineHeight: normal) {
  @include font-family-custom-sans-serif($font);
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}
@mixin font-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-serif;
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-sans-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-sans-serif;
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-monospace($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-monospace;
  @include font-shorthand($size, $weight, $lineHeight);
}


// Form field states (used in forms.less)
// --------------------------------------------------

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  input,
  select,
  textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}



// CSS3 PROPERTIES
// --------------------------------------------------

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resize anything
@mixin resizable($direction: both) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}



// BACKGROUNDS
// --------------------------------------------------

// Gradient Bar Colors for buttons and√å alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fadein(rgba(0,0,0,.1), 15%);
}

// Gradients
$diff: 5%;
@mixin gradient-auto-vertical($color, $difference: $diff) {
  @include gradient-vertical(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}	
@mixin gradient-auto-horizontal($color, $difference: $diff) {
  @include gradient-horizontal(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}		 
@mixin gradient-auto-radial($color, $difference: $diff) {
  @include gradient-radial(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}	
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  @include background-image(linear-gradient(left, $startColor, $endColor));
  background-repeat: repeat-x;
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  @include background-image(linear-gradient(top, $startColor, $endColor));
  background-repeat: repeat-x;
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  @include background-image(linear-gradient($deg, $startColor, $endColor));
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  @include background-image(linear-gradient($startColor, $midColor $colorStop, $endColor));
  background-repeat: no-repeat;
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
  background-color: $outerColor;
  @include background-image(radial-gradient(circle, $innerColor, $outerColor));
  background-repeat: no-repeat;
}
@mixin gradient-striped($color, $angle: -45deg) {
  background-color: $color;
  @include background-image(linear, 0 100%, 100% 0, color-stop($angle 25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
}
// Reset filters for IE
@mixin reset-filter() {
  filter: "progid:DXImageTransform.Microsoft.gradient(enabled = false)";
}



// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider() {
  height: 1px;
  margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
  overflow: hidden;
  background-color: #e5e5e5;
  border-bottom: 1px solid $white;

  // IE7 needs a set width since we gave a height. Restricting just
  // to IE7 to keep the 1px left/right space in other browsers.
  // It is unclear where IE is getting the extra space that we need
  // to negative-margin away, but so it goes.
  *width: 100%;
  *margin: -5px 0 5px;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($endColor, 10%) \9;
  }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
  margin-top: ($navbarHeight - $elementHeight) / 2;
}

// Popover arrows
// -------------------------
// For tipsies and popovers
  @mixin popoverArrow-top($arrowWidth: 5px) {
    bottom: 0;
    left: 50%;
    margin-left: -$arrowWidth;
    border-left: $arrowWidth solid transparent;
    border-right: $arrowWidth solid transparent;
    border-top: $arrowWidth solid $black;
  }
  @mixin popoverArrow-left($arrowWidth: 5px) {
    top: 50%;
    right: 0;
    margin-top: -$arrowWidth;
    border-top: $arrowWidth solid transparent;
    border-bottom: $arrowWidth solid transparent;
    border-left: $arrowWidth solid $black;
  }
  @mixin popoverArrow-bottom($arrowWidth: 5px) {
    top: 0;
    left: 50%;
    margin-left: -$arrowWidth;
    border-left: $arrowWidth solid transparent;
    border-right: $arrowWidth solid transparent;
    border-bottom: $arrowWidth solid $black;
  }
  @mixin popoverArrow-right($arrowWidth: 5px) {
    top: 50%;
    left: 0;
    margin-top: -$arrowWidth;
    border-top: $arrowWidth solid transparent;
    border-bottom: $arrowWidth solid transparent;
    border-right: $arrowWidth solid $black;
  }

// Grid System
// -----------

@mixin container-fixed() {
  margin-left: auto;
  margin-right: auto;
  @include clearfix();
}

@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Le grid system
// -------------------------

@mixin gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
	width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
} 
@mixin gridCore-offset($gridColumnWidth, $gridGutterWidth, $columns) {
	margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)) + ($gridGutterWidth * 2);
}
@mixin gridCore-gridColumn($gridGutterWidth) {
	float: left;
	margin-left: $gridGutterWidth;
}

// Take these values and mixins, and make 'em do their thang
@mixin gridCore-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  // Row surrounds the columns
  .row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }
  // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
  [class*="span"] {
    @include gridCore-gridColumn($gridGutterWidth);
  }
  
  // Set the container width, and override it for fixed navbars in media queries
  .container,
  .navbar-fixed-top .container,
  .navbar-fixed-bottom .container { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  
  // Default columns
  .span1     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 1); }
  .span2     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 2); }
  .span3     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 3); }
  .span4     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 4); }
  .span5     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 5); }
  .span6     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 6); }
  .span7     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 7); }
  .span8     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 8); }
  .span9     { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 9); }
  .span10    { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 10); }
  .span11    { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 11); }
  .span12    { @include gridCore-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  
  // Offset column options
  .offset1   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 1); }
  .offset2   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 2); }
  .offset3   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 3); }
  .offset4   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 4); }
  .offset5   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 5); }
  .offset6   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 6); }
  .offset7   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 7); }
  .offset8   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 8); }
  .offset9   { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 9); }
  .offset10  { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 10); }
  .offset11  { @include gridCore-offset($gridColumnWidth, $gridGutterWidth, 11); }
}

// Fluid grid system
// -------------------------
@mixin gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, $columns) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
} 
@mixin gridFluid-gridColumn($fluidGridGutterWidth) {
  float: left;
  margin-left: $fluidGridGutterWidth;
}
// Take these values and mixins, and make 'em do their thang
@mixin gridFluid-generate($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {      
  // Row surrounds the columns
  .row-fluid {
    width: 100%;
    @include clearfix();

    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
    > [class*="span"] {
      @include gridFluid-gridColumn($fluidGridGutterWidth);
    }
    > [class*="span"]:first-child {
      margin-left: 0;
    }
    // Default columns
    > .span1     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 1); }
    > .span2     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 2); }
    > .span3     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 3); }
    > .span4     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 4); }
    > .span5     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 5); }
    > .span6     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 6); }
    > .span7     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 7); }
    > .span8     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 8); }
    > .span9     { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 9); }
    > .span10    { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 10); }
    > .span11    { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 11); }
    > .span12    { @include gridFluid-span($fluidGridGutterWidth, $fluidGridColumnWidth, 12); }
  }
}



// Input grid system
// -------------------------
@mixin gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}
@mixin gridInput-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    &.span1     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 1); }
    &.span2     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 2); }
    &.span3     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 3); }
    &.span4     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 4); }
    &.span5     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 5); }
    &.span6     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 6); }
    &.span7     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 7); }
    &.span8     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 8); }
    &.span9     { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 9); }
    &.span10    { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 10); }
    &.span11    { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 11); }
    &.span12    { @include gridInput-span($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  }
}