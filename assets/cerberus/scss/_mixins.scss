// MIXINS
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// -------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;

  &:last-child {
    *margin-left: 0;
  }
}

// Sizing shortcuts
// -------------------------
@mixin size($height: 5px, $width: 5px) {
  width: $width;
  height: $height;
}
@mixin square($size: 5px) {
  @include size($size, $size);
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  :-moz-placeholder {
    color: $color;
  }
  ::-webkit-input-placeholder {
    color: $color;
  }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



// FONTS
// --------------------------------------------------

// Font Stacks
@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}
@mixin font-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-family: Georgia, "Times New Roman", Times, serif;
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-sans-serif($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-family-monospace {
  font-family: Menlo, Monaco, "Courier New", monospace;
}
@mixin font-monospace($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include font-family-monospace;
  @include font-shorthand($size, $weight, $lineHeight);
}












// GRID SYSTEM
// --------------------------------------------------

// Site container
// -------------------------
@mixin container-fixed() {
  width: $gridRowWidth;
  margin-left: auto;
  margin-right: auto;
  @include clearfix();
}

// Le grid system
// -------------------------
@mixin gridSystem-columns ($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
	width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
} 
@mixin gridSystem-offset($gridColumnWidth, $gridGutterWidth, $columns) {
	margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)) + ($gridGutterWidth * 2);
}
@mixin gridSystem-gridColumn($gridGutterWidth) {
	float: left;
	margin-left: $gridGutterWidth;
}

// Take these values and mixins, and make 'em do their thang
@mixin gridSystem-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  // Row surrounds the columns
  .row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }
  // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
  [class*="span"] {
    @include gridSystem-gridColumn($gridGutterWidth);
  }
  // Default columns
  .span1     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 1); }
  .span2     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 2); }
  .span3     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 3); }
  .span4     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 4); }
  .span5     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 5); }
  .span6     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 6); }
  .span7     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 7); }
  .span8     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 8); }
  .span9     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 9); }
  .span10    { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 10); }
  .span11    { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 11); }
  .span12,
  .container { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  // Offset column options
  .offset1   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 1); }
  .offset2   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 2); }
  .offset3   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 3); }
  .offset4   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 4); }
  .offset5   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 5); }
  .offset6   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 6); }
  .offset7   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 7); }
  .offset8   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 8); }
  .offset9   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 9); }
  .offset10  { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 10); }
  .offset11  { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 11); }
}

// Fluid grid system
// -------------------------
@mixin fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, $columns) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
} 
@mixin fluidGridSystem-gridColumn($fluidGridGutterWidth) {
  float: left;
  margin-left: $fluidGridGutterWidth;
}
// Take these values and mixins, and make 'em do their thang
@mixin fluidGridSystem-generate($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {      
  // Row surrounds the columns
  .row-fluid {
    width: 100%;
    @include clearfix();

    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
    > [class*="span"] {
      @include fluidGridSystem-gridColumn($fluidGridGutterWidth);
    }
    > [class*="span"]:first-child {
      margin-left: 0;
    }
    // Default columns
    > .span1     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 1); }
    > .span2     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 2); }
    > .span3     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 3); }
    > .span4     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 4); }
    > .span5     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 5); }
    > .span6     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 6); }
    > .span7     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 7); }
    > .span8     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 8); }
    > .span9     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 9); }
    > .span10    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 10); }
    > .span11    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 11); }
    > .span12    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 12); }
  }
}



// Input grid system
// -------------------------
@mixin inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}
@mixin inputGridSystem-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    &.span1     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 1); }
    &.span2     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 2); }
    &.span3     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 3); }
    &.span4     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 4); }
    &.span5     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 5); }
    &.span6     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 6); }
    &.span7     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 7); }
    &.span8     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 8); }
    &.span9     { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 9); }
    &.span10    { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 10); }
    &.span11    { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 11); }
    &.span12    { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  }
}






// Make a Grid
// -------------------------
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
  margin-left: $gridGutterWidth * -1;
  @include clearfix();
}
@mixin makeColumn($columns: 1) {
  float: left;
  margin-left: $gridGutterWidth;
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}



// Form field states (used in forms.less)
// --------------------------------------------------

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  input,
  select,
  textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}



// CSS3 PROPERTIES
// --------------------------------------------------

// Transitions
@mixin transition($transition) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}

// Transformations
@mixin rotate($degrees: 5deg) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin translate($x: 0, $y: 0) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin skew($x: 0, $y: 0) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin translate3d($x: 0, $y: 0, $z: 0) {
  -webkit-transform: translate($x, $y, $z);
     -moz-transform: translate($x, $y, $z);
      -ms-transform: translate($x, $y, $z);
       -o-transform: translate($x, $y, $z);
          transform: translate($x, $y, $z);
}

// Background clipping
// Heads up: FF 3.6 and under need padding instead of padding-box
@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Background sizing
@mixin background-size($size){
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}


// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resize anything
@mixin resizable($direction: both) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
@mixin content-columns($columnCount, $columnGap: $gridColumnGutter) {
  -webkit-column-count: $columnCount;
     -moz-column-count: $columnCount;
          column-count: $columnCount;
  -webkit-column-gap: $columnGap;
     -moz-column-gap: $columnGap;
          column-gap: $columnGap;
}

// Opacity
@mixin opacity($opacity: 100) {
  opacity: $opacity / 100;
   filter: alpha(opacity=$opacity);
}



// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
    background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}
@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include background-clip(padding-box);
}



// Gradients
$default_diff: 5% !default;
	
@mixin gradient-auto-vertical($color, $difference: $default_diff) {
  @include gradient-vertical(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}	
@mixin gradient-auto-horizontal($color, $difference: $default_diff) {
  @include gradient-horizontal(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}		 
@mixin gradient-auto-radial($color, $difference: $default_diff) {
  @include gradient-radial(lighten($color, $difference), darken($color, $difference));
  border-top: 1px solid lighten($color, $difference+20);
  border-bottom: 1px solid darken($color, $difference+20);		
}	
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  @include background-image(linear-gradient(left, $startColor, $endColor));
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  @include background-image(linear-gradient(top, $startColor, $endColor));
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  @include background-image(linear-gradient($deg, $startColor, $endColor));
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  @include background-image(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
}
@mixin gradient-radial($centerColor: #555, $outsideColor: #333)  {
  background-color: $outerColor;
  @include background-image(radial-gradient(circle, $centerColor, $outsideColor));
}
@mixin gradient-striped($color,$angle: -45deg) {
    background-color: $color;
    @include background-image(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// Reset filters for IE
@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}

// Mixin for generating button backgrounds
// ---------------------------------------
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($endColor, 10%) #{"\9"};
  }
}


// COMPONENT MIXINS
// --------------------------------------------------

// POPOVER ARROWS
// -------------------------
// For tipsies and popovers
@mixin popoverArrow-top($arrowWidth: 5px) {
  bottom: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-top: $arrowWidth solid $black;
}
@mixin popoverArrow-left($arrowWidth: 5px) {
  top: 50%;
  right: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-left: $arrowWidth solid $black;
}
@mixin popoverArrow-bottom($arrowWidth: 5px) {
  top: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid $black;
}
@mixin popoverArrow-right($arrowWidth: 5px) {
  top: 50%;
  left: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-right: $arrowWidth solid $black;
}

///////////////////////////////////////////////
////////////////// CERBERUS /////////////////// 
///////////////////////////////////////////////

// LESS COMPATIBILITY

@function fade($color, $opacity)
{
	@return rgba($color, ($opacity/100));
}

// Box-sizing : border-box
@mixin border-box
{
	@include box-sizing(border-box);
}

@mixin fontface($fontFamily, $fileName, $style: normal, $weight: normal)
{
	@include font-face($fontFamily, font-files("#{fileName}.ttf", truetype, "#{fileName}.woff", woff, "#{fileName}.otf", opentype, "#{fileName}.eot#iefix", embedded-opentype, "#{fileName}.svg##{fontFamily}", svg));
}

///////////////////////////////////////////////
////////////////// IMAGES ///////////////////// 
///////////////////////////////////////////////

.image-wrap
{
	position: relative;
	display: inline-block;
	max-width: 100%;
	vertical-align: bottom;
}

.image-wrap:after
{
	@include square(100%);
	content: ' ';
	position: absolute;
	top: -1px;
	left: -1px;
	border: solid 1px #1b1b1b;
	@include border-radius(7px);
	$shadows:
		inset 0 0 1px fade(white, 40),
		inset 0 1px 0 fade(white, 40),
		0 1px 2px fade(black, 30);
	@include box-shadow($shadows);
}
.image-wrap img
{
	vertical-align: bottom;
	@include box-shadow(0 1px 2px fade(black, 40));
	@include border-radius(6px);
}

.embossed.image-wrap:after
{
	$shadows:
		inset 0 0 1px fade(black, 80),
		inset 0 1px 0 fade(white, 50),
		inset 0 -6px 0 fade(black, 60),
		inset 0 -7px 0 fade(white, 30);
	@include box-shadow($shadows);
}
.glossy.image-wrap:before
{
	position: absolute;
	content: ' ';
	@include size(50%, 100%);
	top: 0;
	left: 0;
	@include border-radius(7px, 0);
	@include gradient-vertical(fade(white, 60), fade(white, 15));
}
.soft-embossed.image-wrap:after
{
	$shadows:
		inset 0 0 3px fade(black, 10),
		inset 0 1px 1px fade(white, 50),
		inset 0 -6px 2px fade(black, 60),
		inset 0 -8px 2px fade(white, 30);
	@include box-shadow($shadows);
}
.cutout.image-wrap:after
{
	$shadows:
		0 1px 0 fade(white, 20),
		inset 0 4px 5px fade(black, 60),
		inset 0 1px 2px fade(black, 60);
	@include box-shadow($shadows);
}

///////////////////////////////////////////////
////////////////// OMBRES ///////////////////// 
///////////////////////////////////////////////

// Ombres texte
$default_size: 2px !default;
$default_opacity: 25 !default;

@mixin text-drop($color, $size: $default_size)
{
	color: $color;
	@include text-shadow($size $size 0 fade(black, $default));
}

///////////////////////////////////////////////
////////////////// ANIMATIONS ///////////////// 
///////////////////////////////////////////////

$transition: 0.3s;

@mixin animate-fill-mode($mode: both)
{
	-webkit-animation-fill-mode: both;
	   -moz-animation-fill-mode: both;
		-ms-animation-fill-mode: both;
		 -o-animation-fill-mode: both;
			animation-fill-mode: both;	
}
@mixin animate($animation: fadeIn, $duration: 1s, $delay: 0, $transition: ease)
{
	-webkit-animation: $animation $duration $transition $delay;
	   -moz-animation: $animation $duration $transition $delay;
		-ms-animation: $animation $duration $transition $delay;
		 -o-animation: $animation $duration $transition $delay;
			animation: $animation $duration $transition $delay;
			@include animate-fill-mode;
}

@mixin transition($range: all, $time: $transition, $ease: ease-in-out)
{
	   -webkit-transition: $range $time $ease;
		  -moz-transition: $range $time $ease;
		   -ms-transition: $range $time $ease;
			-o-transition: $range $time $ease;
			   transition: $range $time $ease;
}

///////////////////////////////////////////////
////////////////// DEPRECATED ///////////////// 
///////////////////////////////////////////////

@mixin bouton($color: $main)
{
	$bordure: 5px;
	
	cursor: pointer;
	@include gradient-auto-vertical($color, 5%);
	text-shadow: 0 2px 0 darken($color, 25);
	@include box-shadow(0 $bordure 0 0 darken($color, 20));
	border: 1px solid darken($color, 10);
	padding: 5px;
	@include transition(all, 0.1s);
	
	&:hover
	{
		@include gradient-auto-vertical(lighten($color, 5%), 5%);
		@include box-shadow(0, $bordure, 0, 0, lighten(darken($color, 20%), 10));
	}
	&:active
	{
		@include gradient-auto-vertical(darken($color, 10%), 5%);
		@include box-shadow(none);
		margin-bottom: 5px;
	}
}
@mixin lighten($light: 50)
{
	background-image: url("../img/overlay-blanc-#{light}.png");
}
@mixin darken($dark: 50)
{
	background-image: url("../img/overlay-noir-#{dark}.png");
}

@mixin selection($background, $color: white)
{
	&::selection
	{
		background: $background;
		color: $color;
	}
	&::-moz-selection
	{
		background: $background;
		color: $color;
	}
}